// Copyright The HTNN Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: types/plugins/limitToken/config.proto

package limittoken

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Config is the top-level configuration structure for the limittoken plugin.
type Config struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	RejectedCode int32                  `protobuf:"varint,1,opt,name=rejected_code,json=rejectedCode,proto3" json:"rejected_code,omitempty"`
	RejectedMsg  string                 `protobuf:"bytes,2,opt,name=rejected_msg,json=rejectedMsg,proto3" json:"rejected_msg,omitempty"`
	Rule         *Rule                  `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
	Redis        *RedisConfig           `protobuf:"bytes,4,opt,name=redis,proto3" json:"redis,omitempty"`
	TokenStats   *TokenStatsConfig      `protobuf:"bytes,5,opt,name=token_stats,json=tokenStats,proto3" json:"token_stats,omitempty"`
	Tokenizer    string                 `protobuf:"bytes,6,opt,name=tokenizer,proto3" json:"tokenizer,omitempty"`
	// Types that are valid to be assigned to ExtractorConfig:
	//
	//	*Config_GjsonConfig
	ExtractorConfig  isConfig_ExtractorConfig `protobuf_oneof:"extractor_config"`
	StreamingEnabled bool                     `protobuf:"varint,7,opt,name=streaming_enabled,json=streamingEnabled,proto3" json:"streaming_enabled,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_types_plugins_limitToken_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetRejectedCode() int32 {
	if x != nil {
		return x.RejectedCode
	}
	return 0
}

func (x *Config) GetRejectedMsg() string {
	if x != nil {
		return x.RejectedMsg
	}
	return ""
}

func (x *Config) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *Config) GetRedis() *RedisConfig {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Config) GetTokenStats() *TokenStatsConfig {
	if x != nil {
		return x.TokenStats
	}
	return nil
}

func (x *Config) GetTokenizer() string {
	if x != nil {
		return x.Tokenizer
	}
	return ""
}

func (x *Config) GetExtractorConfig() isConfig_ExtractorConfig {
	if x != nil {
		return x.ExtractorConfig
	}
	return nil
}

func (x *Config) GetGjsonConfig() *GjsonConfig {
	if x != nil {
		if x, ok := x.ExtractorConfig.(*Config_GjsonConfig); ok {
			return x.GjsonConfig
		}
	}
	return nil
}

func (x *Config) GetStreamingEnabled() bool {
	if x != nil {
		return x.StreamingEnabled
	}
	return false
}

type isConfig_ExtractorConfig interface {
	isConfig_ExtractorConfig()
}

type Config_GjsonConfig struct {
	GjsonConfig *GjsonConfig `protobuf:"bytes,100,opt,name=gjson_config,json=gjsonConfig,proto3,oneof"`
}

func (*Config_GjsonConfig) isConfig_ExtractorConfig() {}

type Rule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to LimitBy:
	//
	//	*Rule_LimitByHeader
	//	*Rule_LimitByParam
	//	*Rule_LimitByCookie
	//	*Rule_LimitByConsumer
	//	*Rule_LimitByPerIp
	//	*Rule_LimitByPerHeader
	//	*Rule_LimitByPerParam
	//	*Rule_LimitByPerCookie
	//	*Rule_LimitByPerConsumer
	LimitBy       isRule_LimitBy `protobuf_oneof:"limit_by"`
	Buckets       []*Bucket      `protobuf:"bytes,10,rep,name=buckets,proto3" json:"buckets,omitempty"`
	Keys          []string       `protobuf:"bytes,11,rep,name=keys,proto3" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rule) Reset() {
	*x = Rule{}
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_types_plugins_limitToken_config_proto_rawDescGZIP(), []int{1}
}

func (x *Rule) GetLimitBy() isRule_LimitBy {
	if x != nil {
		return x.LimitBy
	}
	return nil
}

func (x *Rule) GetLimitByHeader() string {
	if x != nil {
		if x, ok := x.LimitBy.(*Rule_LimitByHeader); ok {
			return x.LimitByHeader
		}
	}
	return ""
}

func (x *Rule) GetLimitByParam() string {
	if x != nil {
		if x, ok := x.LimitBy.(*Rule_LimitByParam); ok {
			return x.LimitByParam
		}
	}
	return ""
}

func (x *Rule) GetLimitByCookie() string {
	if x != nil {
		if x, ok := x.LimitBy.(*Rule_LimitByCookie); ok {
			return x.LimitByCookie
		}
	}
	return ""
}

func (x *Rule) GetLimitByConsumer() string {
	if x != nil {
		if x, ok := x.LimitBy.(*Rule_LimitByConsumer); ok {
			return x.LimitByConsumer
		}
	}
	return ""
}

func (x *Rule) GetLimitByPerIp() string {
	if x != nil {
		if x, ok := x.LimitBy.(*Rule_LimitByPerIp); ok {
			return x.LimitByPerIp
		}
	}
	return ""
}

func (x *Rule) GetLimitByPerHeader() string {
	if x != nil {
		if x, ok := x.LimitBy.(*Rule_LimitByPerHeader); ok {
			return x.LimitByPerHeader
		}
	}
	return ""
}

func (x *Rule) GetLimitByPerParam() string {
	if x != nil {
		if x, ok := x.LimitBy.(*Rule_LimitByPerParam); ok {
			return x.LimitByPerParam
		}
	}
	return ""
}

func (x *Rule) GetLimitByPerCookie() string {
	if x != nil {
		if x, ok := x.LimitBy.(*Rule_LimitByPerCookie); ok {
			return x.LimitByPerCookie
		}
	}
	return ""
}

func (x *Rule) GetLimitByPerConsumer() string {
	if x != nil {
		if x, ok := x.LimitBy.(*Rule_LimitByPerConsumer); ok {
			return x.LimitByPerConsumer
		}
	}
	return ""
}

func (x *Rule) GetBuckets() []*Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *Rule) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type isRule_LimitBy interface {
	isRule_LimitBy()
}

type Rule_LimitByHeader struct {
	LimitByHeader string `protobuf:"bytes,1,opt,name=limit_by_header,json=limitByHeader,proto3,oneof"`
}

type Rule_LimitByParam struct {
	LimitByParam string `protobuf:"bytes,2,opt,name=limit_by_param,json=limitByParam,proto3,oneof"`
}

type Rule_LimitByCookie struct {
	LimitByCookie string `protobuf:"bytes,3,opt,name=limit_by_cookie,json=limitByCookie,proto3,oneof"`
}

type Rule_LimitByConsumer struct {
	LimitByConsumer string `protobuf:"bytes,4,opt,name=limit_by_consumer,json=limitByConsumer,proto3,oneof"`
}

type Rule_LimitByPerIp struct {
	LimitByPerIp string `protobuf:"bytes,5,opt,name=limit_by_per_ip,json=limitByPerIp,proto3,oneof"`
}

type Rule_LimitByPerHeader struct {
	LimitByPerHeader string `protobuf:"bytes,6,opt,name=limit_by_per_header,json=limitByPerHeader,proto3,oneof"`
}

type Rule_LimitByPerParam struct {
	LimitByPerParam string `protobuf:"bytes,7,opt,name=limit_by_per_param,json=limitByPerParam,proto3,oneof"`
}

type Rule_LimitByPerCookie struct {
	LimitByPerCookie string `protobuf:"bytes,8,opt,name=limit_by_per_cookie,json=limitByPerCookie,proto3,oneof"`
}

type Rule_LimitByPerConsumer struct {
	LimitByPerConsumer string `protobuf:"bytes,9,opt,name=limit_by_per_consumer,json=limitByPerConsumer,proto3,oneof"`
}

func (*Rule_LimitByHeader) isRule_LimitBy() {}

func (*Rule_LimitByParam) isRule_LimitBy() {}

func (*Rule_LimitByCookie) isRule_LimitBy() {}

func (*Rule_LimitByConsumer) isRule_LimitBy() {}

func (*Rule_LimitByPerIp) isRule_LimitBy() {}

func (*Rule_LimitByPerHeader) isRule_LimitBy() {}

func (*Rule_LimitByPerParam) isRule_LimitBy() {}

func (*Rule_LimitByPerCookie) isRule_LimitBy() {}

func (*Rule_LimitByPerConsumer) isRule_LimitBy() {}

type Bucket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Burst         int32                  `protobuf:"varint,1,opt,name=burst,proto3" json:"burst,omitempty"`
	Rate          int32                  `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
	Round         int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bucket) Reset() {
	*x = Bucket{}
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bucket) ProtoMessage() {}

func (x *Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bucket.ProtoReflect.Descriptor instead.
func (*Bucket) Descriptor() ([]byte, []int) {
	return file_types_plugins_limitToken_config_proto_rawDescGZIP(), []int{2}
}

func (x *Bucket) GetBurst() int32 {
	if x != nil {
		return x.Burst
	}
	return 0
}

func (x *Bucket) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Bucket) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type RedisConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceAddr   string                 `protobuf:"bytes,1,opt,name=service_addr,json=serviceAddr,proto3" json:"service_addr,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Timeout       uint32                 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisConfig) Reset() {
	*x = RedisConfig{}
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConfig) ProtoMessage() {}

func (x *RedisConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConfig.ProtoReflect.Descriptor instead.
func (*RedisConfig) Descriptor() ([]byte, []int) {
	return file_types_plugins_limitToken_config_proto_rawDescGZIP(), []int{3}
}

func (x *RedisConfig) GetServiceAddr() string {
	if x != nil {
		return x.ServiceAddr
	}
	return ""
}

func (x *RedisConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RedisConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RedisConfig) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type TokenStatsConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	WindowSize      int32                  `protobuf:"varint,1,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	MinSamples      int32                  `protobuf:"varint,2,opt,name=min_samples,json=minSamples,proto3" json:"min_samples,omitempty"`
	MaxRatio        float32                `protobuf:"fixed32,3,opt,name=max_ratio,json=maxRatio,proto3" json:"max_ratio,omitempty"`
	MaxTokensPerReq int32                  `protobuf:"varint,4,opt,name=max_tokens_per_req,json=maxTokensPerReq,proto3" json:"max_tokens_per_req,omitempty"`
	ExceedFactor    float32                `protobuf:"fixed32,5,opt,name=exceed_factor,json=exceedFactor,proto3" json:"exceed_factor,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TokenStatsConfig) Reset() {
	*x = TokenStatsConfig{}
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenStatsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenStatsConfig) ProtoMessage() {}

func (x *TokenStatsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenStatsConfig.ProtoReflect.Descriptor instead.
func (*TokenStatsConfig) Descriptor() ([]byte, []int) {
	return file_types_plugins_limitToken_config_proto_rawDescGZIP(), []int{4}
}

func (x *TokenStatsConfig) GetWindowSize() int32 {
	if x != nil {
		return x.WindowSize
	}
	return 0
}

func (x *TokenStatsConfig) GetMinSamples() int32 {
	if x != nil {
		return x.MinSamples
	}
	return 0
}

func (x *TokenStatsConfig) GetMaxRatio() float32 {
	if x != nil {
		return x.MaxRatio
	}
	return 0
}

func (x *TokenStatsConfig) GetMaxTokensPerReq() int32 {
	if x != nil {
		return x.MaxTokensPerReq
	}
	return 0
}

func (x *TokenStatsConfig) GetExceedFactor() float32 {
	if x != nil {
		return x.ExceedFactor
	}
	return 0
}

type GjsonConfig struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	RequestContentPath           string                 `protobuf:"bytes,1,opt,name=request_content_path,json=requestContentPath,proto3" json:"request_content_path,omitempty"`
	RequestModelPath             string                 `protobuf:"bytes,2,opt,name=request_model_path,json=requestModelPath,proto3" json:"request_model_path,omitempty"`
	ResponseContentPath          string                 `protobuf:"bytes,3,opt,name=response_content_path,json=responseContentPath,proto3" json:"response_content_path,omitempty"`
	ResponseModelPath            string                 `protobuf:"bytes,4,opt,name=response_model_path,json=responseModelPath,proto3" json:"response_model_path,omitempty"`
	ResponseCompletionTokensPath string                 `protobuf:"bytes,5,opt,name=response_completion_tokens_path,json=responseCompletionTokensPath,proto3" json:"response_completion_tokens_path,omitempty"`
	ResponsePromptTokensPath     string                 `protobuf:"bytes,6,opt,name=response_prompt_tokens_path,json=responsePromptTokensPath,proto3" json:"response_prompt_tokens_path,omitempty"`
	StreamResponseContentPath    string                 `protobuf:"bytes,7,opt,name=stream_response_content_path,json=streamResponseContentPath,proto3" json:"stream_response_content_path,omitempty"`
	StreamResponseModelPath      string                 `protobuf:"bytes,8,opt,name=stream_response_model_path,json=streamResponseModelPath,proto3" json:"stream_response_model_path,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *GjsonConfig) Reset() {
	*x = GjsonConfig{}
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GjsonConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GjsonConfig) ProtoMessage() {}

func (x *GjsonConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GjsonConfig.ProtoReflect.Descriptor instead.
func (*GjsonConfig) Descriptor() ([]byte, []int) {
	return file_types_plugins_limitToken_config_proto_rawDescGZIP(), []int{5}
}

func (x *GjsonConfig) GetRequestContentPath() string {
	if x != nil {
		return x.RequestContentPath
	}
	return ""
}

func (x *GjsonConfig) GetRequestModelPath() string {
	if x != nil {
		return x.RequestModelPath
	}
	return ""
}

func (x *GjsonConfig) GetResponseContentPath() string {
	if x != nil {
		return x.ResponseContentPath
	}
	return ""
}

func (x *GjsonConfig) GetResponseModelPath() string {
	if x != nil {
		return x.ResponseModelPath
	}
	return ""
}

func (x *GjsonConfig) GetResponseCompletionTokensPath() string {
	if x != nil {
		return x.ResponseCompletionTokensPath
	}
	return ""
}

func (x *GjsonConfig) GetResponsePromptTokensPath() string {
	if x != nil {
		return x.ResponsePromptTokensPath
	}
	return ""
}

func (x *GjsonConfig) GetStreamResponseContentPath() string {
	if x != nil {
		return x.StreamResponseContentPath
	}
	return ""
}

func (x *GjsonConfig) GetStreamResponseModelPath() string {
	if x != nil {
		return x.StreamResponseModelPath
	}
	return ""
}

var File_types_plugins_limitToken_config_proto protoreflect.FileDescriptor

const file_types_plugins_limitToken_config_proto_rawDesc = "" +
	"\n" +
	"%types/plugins/limitToken/config.proto\x12\x18types.plugins.limittoken\x1a\x17validate/validate.proto\"\xc3\x03\n" +
	"\x06Config\x12#\n" +
	"\rrejected_code\x18\x01 \x01(\x05R\frejectedCode\x12!\n" +
	"\frejected_msg\x18\x02 \x01(\tR\vrejectedMsg\x122\n" +
	"\x04rule\x18\x03 \x01(\v2\x1e.types.plugins.limittoken.RuleR\x04rule\x12;\n" +
	"\x05redis\x18\x04 \x01(\v2%.types.plugins.limittoken.RedisConfigR\x05redis\x12K\n" +
	"\vtoken_stats\x18\x05 \x01(\v2*.types.plugins.limittoken.TokenStatsConfigR\n" +
	"tokenStats\x12\x1c\n" +
	"\ttokenizer\x18\x06 \x01(\tR\ttokenizer\x12T\n" +
	"\fgjson_config\x18d \x01(\v2%.types.plugins.limittoken.GjsonConfigB\b\xfaB\x05\x8a\x01\x02\x10\x01H\x00R\vgjsonConfig\x12+\n" +
	"\x11streaming_enabled\x18\a \x01(\bR\x10streamingEnabledB\x12\n" +
	"\x10extractor_config\"\xfb\x03\n" +
	"\x04Rule\x12(\n" +
	"\x0flimit_by_header\x18\x01 \x01(\tH\x00R\rlimitByHeader\x12&\n" +
	"\x0elimit_by_param\x18\x02 \x01(\tH\x00R\flimitByParam\x12(\n" +
	"\x0flimit_by_cookie\x18\x03 \x01(\tH\x00R\rlimitByCookie\x12,\n" +
	"\x11limit_by_consumer\x18\x04 \x01(\tH\x00R\x0flimitByConsumer\x12'\n" +
	"\x0flimit_by_per_ip\x18\x05 \x01(\tH\x00R\flimitByPerIp\x12/\n" +
	"\x13limit_by_per_header\x18\x06 \x01(\tH\x00R\x10limitByPerHeader\x12-\n" +
	"\x12limit_by_per_param\x18\a \x01(\tH\x00R\x0flimitByPerParam\x12/\n" +
	"\x13limit_by_per_cookie\x18\b \x01(\tH\x00R\x10limitByPerCookie\x123\n" +
	"\x15limit_by_per_consumer\x18\t \x01(\tH\x00R\x12limitByPerConsumer\x12:\n" +
	"\abuckets\x18\n" +
	" \x03(\v2 .types.plugins.limittoken.BucketR\abuckets\x12\x12\n" +
	"\x04keys\x18\v \x03(\tR\x04keysB\n" +
	"\n" +
	"\blimit_by\"H\n" +
	"\x06Bucket\x12\x14\n" +
	"\x05burst\x18\x01 \x01(\x05R\x05burst\x12\x12\n" +
	"\x04rate\x18\x02 \x01(\x05R\x04rate\x12\x14\n" +
	"\x05round\x18\x03 \x01(\x05R\x05round\"\x8b\x01\n" +
	"\vRedisConfig\x12*\n" +
	"\fservice_addr\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\vserviceAddr\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\x12\x18\n" +
	"\atimeout\x18\x04 \x01(\rR\atimeout\"\xc3\x01\n" +
	"\x10TokenStatsConfig\x12\x1f\n" +
	"\vwindow_size\x18\x01 \x01(\x05R\n" +
	"windowSize\x12\x1f\n" +
	"\vmin_samples\x18\x02 \x01(\x05R\n" +
	"minSamples\x12\x1b\n" +
	"\tmax_ratio\x18\x03 \x01(\x02R\bmaxRatio\x12+\n" +
	"\x12max_tokens_per_req\x18\x04 \x01(\x05R\x0fmaxTokensPerReq\x12#\n" +
	"\rexceed_factor\x18\x05 \x01(\x02R\fexceedFactor\"\xf9\x03\n" +
	"\vGjsonConfig\x129\n" +
	"\x14request_content_path\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x12requestContentPath\x125\n" +
	"\x12request_model_path\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x10requestModelPath\x12;\n" +
	"\x15response_content_path\x18\x03 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x13responseContentPath\x127\n" +
	"\x13response_model_path\x18\x04 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x11responseModelPath\x12E\n" +
	"\x1fresponse_completion_tokens_path\x18\x05 \x01(\tR\x1cresponseCompletionTokensPath\x12=\n" +
	"\x1bresponse_prompt_tokens_path\x18\x06 \x01(\tR\x18responsePromptTokensPath\x12?\n" +
	"\x1cstream_response_content_path\x18\a \x01(\tR\x19streamResponseContentPath\x12;\n" +
	"\x1astream_response_model_path\x18\b \x01(\tR\x17streamResponseModelPathB'Z%mosn.io/htnn/types/plugins/limittokenb\x06proto3"

var (
	file_types_plugins_limitToken_config_proto_rawDescOnce sync.Once
	file_types_plugins_limitToken_config_proto_rawDescData []byte
)

func file_types_plugins_limitToken_config_proto_rawDescGZIP() []byte {
	file_types_plugins_limitToken_config_proto_rawDescOnce.Do(func() {
		file_types_plugins_limitToken_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_types_plugins_limitToken_config_proto_rawDesc), len(file_types_plugins_limitToken_config_proto_rawDesc)))
	})
	return file_types_plugins_limitToken_config_proto_rawDescData
}

var file_types_plugins_limitToken_config_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_types_plugins_limitToken_config_proto_goTypes = []any{
	(*Config)(nil),           // 0: types.plugins.limittoken.Config
	(*Rule)(nil),             // 1: types.plugins.limittoken.Rule
	(*Bucket)(nil),           // 2: types.plugins.limittoken.Bucket
	(*RedisConfig)(nil),      // 3: types.plugins.limittoken.RedisConfig
	(*TokenStatsConfig)(nil), // 4: types.plugins.limittoken.TokenStatsConfig
	(*GjsonConfig)(nil),      // 5: types.plugins.limittoken.GjsonConfig
}
var file_types_plugins_limitToken_config_proto_depIdxs = []int32{
	1, // 0: types.plugins.limittoken.Config.rule:type_name -> types.plugins.limittoken.Rule
	3, // 1: types.plugins.limittoken.Config.redis:type_name -> types.plugins.limittoken.RedisConfig
	4, // 2: types.plugins.limittoken.Config.token_stats:type_name -> types.plugins.limittoken.TokenStatsConfig
	5, // 3: types.plugins.limittoken.Config.gjson_config:type_name -> types.plugins.limittoken.GjsonConfig
	2, // 4: types.plugins.limittoken.Rule.buckets:type_name -> types.plugins.limittoken.Bucket
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_types_plugins_limitToken_config_proto_init() }
func file_types_plugins_limitToken_config_proto_init() {
	if File_types_plugins_limitToken_config_proto != nil {
		return
	}
	file_types_plugins_limitToken_config_proto_msgTypes[0].OneofWrappers = []any{
		(*Config_GjsonConfig)(nil),
	}
	file_types_plugins_limitToken_config_proto_msgTypes[1].OneofWrappers = []any{
		(*Rule_LimitByHeader)(nil),
		(*Rule_LimitByParam)(nil),
		(*Rule_LimitByCookie)(nil),
		(*Rule_LimitByConsumer)(nil),
		(*Rule_LimitByPerIp)(nil),
		(*Rule_LimitByPerHeader)(nil),
		(*Rule_LimitByPerParam)(nil),
		(*Rule_LimitByPerCookie)(nil),
		(*Rule_LimitByPerConsumer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_types_plugins_limitToken_config_proto_rawDesc), len(file_types_plugins_limitToken_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_plugins_limitToken_config_proto_goTypes,
		DependencyIndexes: file_types_plugins_limitToken_config_proto_depIdxs,
		MessageInfos:      file_types_plugins_limitToken_config_proto_msgTypes,
	}.Build()
	File_types_plugins_limitToken_config_proto = out.File
	file_types_plugins_limitToken_config_proto_goTypes = nil
	file_types_plugins_limitToken_config_proto_depIdxs = nil
}
